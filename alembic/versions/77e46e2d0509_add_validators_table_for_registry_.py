"""Add validators table for registry management

Revision ID: 77e46e2d0509
Revises: dff453762595
Create Date: 2025-10-31 13:27:54.537822

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "77e46e2d0509"
down_revision: Union[str, Sequence[str], None] = "dff453762595"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "ingestion_runs",
        "started_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default="NOW()",
        existing_comment="Timestamp when ingestion started",
        existing_nullable=False,
    )
    op.alter_column(
        "staging_payloads",
        "fetch_timestamp",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default="NOW()",
        existing_comment="When data was fetched from provider",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "role",
        existing_type=postgresql.ENUM("admin", "partner", name="userrole"),
        server_default=None,
        type_=sa.String(length=20),
        existing_comment="User role for access control",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_comment="Whether the user account is active",
        existing_nullable=False,
    )
    op.drop_constraint(op.f("users_email_key"), "users", type_="unique")
    op.drop_constraint(op.f("users_username_key"), "users", type_="unique")
    # ### end Alembic commands ###

    # Create validators table
    op.create_table(
        "validators",
        sa.Column("validator_key", sa.String(length=100), nullable=False, comment="Validator public key or identifier"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Blockchain network identifier"),
        sa.Column("description", sa.Text(), nullable=True, comment="Optional description of the validator"),
        sa.Column("is_active", sa.Boolean(), nullable=False, server_default=sa.text("true"), comment="Whether the validator is active"),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text("NOW()"), comment="Timestamp when record was created"),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text("NOW()"), comment="Timestamp when record was last updated"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], name=op.f("fk_validators_chain_id_chains"), ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("validator_key", "chain_id", name=op.f("pk_validators")),
        sa.CheckConstraint("validator_key <> ''", name=op.f("ck_validators_validator_key_not_empty")),
        comment="Registry of validators managed by the platform",
    )
    op.create_index(op.f("ix_validators_chain_id"), "validators", ["chain_id"], unique=False)
    op.create_index(op.f("ix_validators_is_active"), "validators", ["is_active"], unique=False)


def downgrade() -> None:
    """Downgrade schema."""
    # Drop validators table
    op.drop_index(op.f("ix_validators_is_active"), table_name="validators")
    op.drop_index(op.f("ix_validators_chain_id"), table_name="validators")
    op.drop_table("validators")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(
        op.f("users_username_key"), "users", ["username"], postgresql_nulls_not_distinct=False
    )
    op.create_unique_constraint(
        op.f("users_email_key"), "users", ["email"], postgresql_nulls_not_distinct=False
    )
    op.alter_column(
        "users",
        "is_active",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("true"),
        existing_comment="Whether the user account is active",
        existing_nullable=False,
    )
    op.alter_column(
        "users",
        "role",
        existing_type=sa.String(length=20),
        server_default=sa.text("'admin'::userrole"),
        type_=postgresql.ENUM("admin", "partner", name="userrole"),
        existing_comment="User role for access control",
        existing_nullable=False,
    )
    op.alter_column(
        "staging_payloads",
        "fetch_timestamp",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("'2025-10-29 20:18:16.240373+00'::timestamp with time zone"),
        existing_comment="When data was fetched from provider",
        existing_nullable=False,
    )
    op.alter_column(
        "ingestion_runs",
        "started_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        server_default=sa.text("'2025-10-29 20:18:16.240373+00'::timestamp with time zone"),
        existing_comment="Timestamp when ingestion started",
        existing_nullable=False,
    )
    # ### end Alembic commands ###
