"""Initial migration: all ORM models

Revision ID: cec3a80e61a4
Revises:
Create Date: 2025-10-27 14:34:18.866627

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "cec3a80e61a4"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "chains",
        sa.Column(
            "chain_id",
            sa.String(length=50),
            nullable=False,
            comment="Unique chain identifier (e.g., 'solana-mainnet')",
        ),
        sa.Column(
            "name", sa.String(length=100), nullable=False, comment="Human-readable chain name"
        ),
        sa.Column(
            "period_type",
            sa.String(length=20),
            nullable=False,
            comment="Period definition type (EPOCH, BLOCK_WINDOW, SLOT_RANGE)",
        ),
        sa.Column(
            "native_unit",
            sa.String(length=20),
            nullable=False,
            comment="Native token unit (e.g., 'lamports', 'wei')",
        ),
        sa.Column(
            "native_decimals",
            sa.Integer(),
            nullable=False,
            comment="Decimal places for native unit conversion",
        ),
        sa.Column(
            "finality_lag",
            sa.Integer(),
            nullable=False,
            comment="Periods to wait before considering data final",
        ),
        sa.Column(
            "is_active", sa.Boolean(), nullable=False, comment="Whether chain is actively tracked"
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint(
            "period_type IN ('EPOCH', 'BLOCK_WINDOW', 'SLOT_RANGE')", name="ck_chains_period_type"
        ),
        sa.CheckConstraint("finality_lag >= 0", name="ck_chains_finality_lag_positive"),
        sa.CheckConstraint("native_decimals >= 0", name="ck_chains_native_decimals_positive"),
        sa.PrimaryKeyConstraint("chain_id"),
    )
    op.create_index("idx_chains_active", "chains", ["is_active"], unique=False)
    op.create_index(op.f("ix_chains_is_active"), "chains", ["is_active"], unique=False)
    op.create_table(
        "partners",
        sa.Column("partner_id", sa.UUID(), nullable=False, comment="Unique partner identifier"),
        sa.Column(
            "partner_name",
            sa.String(length=200),
            nullable=False,
            comment="Display name for partner organization",
        ),
        sa.Column(
            "legal_entity_name",
            sa.String(length=200),
            nullable=True,
            comment="Legal entity for contracts/invoicing",
        ),
        sa.Column(
            "contact_email", sa.String(length=200), nullable=False, comment="Primary contact email"
        ),
        sa.Column(
            "contact_name",
            sa.String(length=200),
            nullable=True,
            comment="Primary contact person name",
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False, comment="Soft-delete flag"),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.PrimaryKeyConstraint("partner_id"),
    )
    op.create_index("idx_partners_active", "partners", ["is_active"], unique=False)
    op.create_index("idx_partners_email", "partners", ["contact_email"], unique=False)
    op.create_table(
        "providers",
        sa.Column("provider_id", sa.UUID(), nullable=False, comment="Unique provider identifier"),
        sa.Column(
            "provider_name",
            sa.String(length=50),
            nullable=False,
            comment="Unique human-readable provider name",
        ),
        sa.Column(
            "provider_type",
            sa.String(length=20),
            nullable=False,
            comment="Data category provided (FEES, MEV, REWARDS, META, RPC)",
        ),
        sa.Column("base_url", sa.Text(), nullable=True, comment="API base URL"),
        sa.Column("api_version", sa.String(length=20), nullable=True, comment="API version string"),
        sa.Column(
            "is_enabled", sa.Boolean(), nullable=False, comment="Whether provider is enabled"
        ),
        sa.Column(
            "rate_limit_per_minute",
            sa.Integer(),
            nullable=True,
            comment="API rate limit (requests per minute)",
        ),
        sa.Column(
            "timeout_seconds", sa.Integer(), nullable=False, comment="Request timeout in seconds"
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint(
            "provider_type IN ('FEES', 'MEV', 'REWARDS', 'META', 'RPC')", name="ck_providers_type"
        ),
        sa.PrimaryKeyConstraint("provider_id"),
    )
    op.create_index("idx_providers_enabled", "providers", ["is_enabled"], unique=False)
    op.create_index("idx_providers_name", "providers", ["provider_name"], unique=False)
    op.create_index("idx_providers_type", "providers", ["provider_type"], unique=False)
    op.create_index(op.f("ix_providers_is_enabled"), "providers", ["is_enabled"], unique=False)
    op.create_index(op.f("ix_providers_provider_name"), "providers", ["provider_name"], unique=True)
    op.create_index(
        op.f("ix_providers_provider_type"), "providers", ["provider_type"], unique=False
    )
    op.create_table(
        "agreements",
        sa.Column("agreement_id", sa.UUID(), nullable=False, comment="Unique agreement identifier"),
        sa.Column("partner_id", sa.UUID(), nullable=False, comment="Reference to partner"),
        sa.Column(
            "agreement_name",
            sa.String(length=200),
            nullable=False,
            comment="Descriptive name for agreement",
        ),
        sa.Column("current_version", sa.Integer(), nullable=False, comment="Active version number"),
        sa.Column(
            "status",
            sa.Enum("DRAFT", "ACTIVE", "SUSPENDED", "TERMINATED", name="agreementstatus"),
            nullable=False,
            comment="Agreement lifecycle status",
        ),
        sa.Column(
            "effective_from",
            sa.TIMESTAMP(timezone=True),
            nullable=False,
            comment="Agreement start date",
        ),
        sa.Column(
            "effective_until",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            comment="Agreement end date (nullable for ongoing)",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.ForeignKeyConstraint(["partner_id"], ["partners.partner_id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("agreement_id"),
    )
    op.create_index(
        "idx_agreements_effective",
        "agreements",
        ["effective_from", "effective_until"],
        unique=False,
    )
    op.create_index("idx_agreements_partner", "agreements", ["partner_id"], unique=False)
    op.create_index("idx_agreements_status", "agreements", ["status"], unique=False)
    op.create_table(
        "canonical_periods",
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Unique period identifier"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column(
            "period_identifier",
            sa.String(length=50),
            nullable=False,
            comment="Chain-specific period ID (e.g., '850' for Solana epoch)",
        ),
        sa.Column(
            "period_start",
            sa.TIMESTAMP(timezone=True),
            nullable=False,
            comment="Period start timestamp",
        ),
        sa.Column(
            "period_end",
            sa.TIMESTAMP(timezone=True),
            nullable=False,
            comment="Period end timestamp",
        ),
        sa.Column(
            "is_finalized",
            sa.Boolean(),
            nullable=False,
            comment="Whether period data is considered final",
        ),
        sa.Column(
            "finalized_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            comment="Timestamp when period was finalized",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("period_id"),
        sa.UniqueConstraint(
            "chain_id", "period_identifier", name="uq_canonical_periods_chain_period"
        ),
    )
    op.create_index("idx_canonical_periods_chain", "canonical_periods", ["chain_id"], unique=False)
    op.create_index(
        "idx_canonical_periods_finalized", "canonical_periods", ["is_finalized"], unique=False
    )
    op.create_index(
        "idx_canonical_periods_range",
        "canonical_periods",
        ["chain_id", "period_start", "period_end"],
        unique=False,
    )
    op.create_index(
        op.f("ix_canonical_periods_chain_id"), "canonical_periods", ["chain_id"], unique=False
    )
    op.create_table(
        "canonical_validator_identities",
        sa.Column("identity_id", sa.UUID(), nullable=False, comment="Unique identity identifier"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column(
            "validator_key",
            sa.String(length=100),
            nullable=False,
            comment="Canonical validator identifier (chain-specific)",
        ),
        sa.Column(
            "vote_pubkey",
            sa.String(length=100),
            nullable=True,
            comment="Solana vote account public key",
        ),
        sa.Column(
            "node_pubkey", sa.String(length=100), nullable=True, comment="Solana node public key"
        ),
        sa.Column(
            "identity_pubkey",
            sa.String(length=100),
            nullable=True,
            comment="Solana identity public key",
        ),
        sa.Column(
            "fee_recipient",
            sa.String(length=100),
            nullable=True,
            comment="Ethereum fee recipient address",
        ),
        sa.Column(
            "display_name",
            sa.String(length=200),
            nullable=True,
            comment="Human-readable validator name",
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False, comment="Whether validator is active"),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("identity_id"),
        sa.UniqueConstraint(
            "chain_id", "validator_key", name="uq_canonical_validator_identities_chain_key"
        ),
    )
    op.create_index(
        "idx_validator_identities_chain",
        "canonical_validator_identities",
        ["chain_id"],
        unique=False,
    )
    op.create_index(
        "idx_validator_identities_key",
        "canonical_validator_identities",
        ["validator_key"],
        unique=False,
    )
    op.create_index(
        op.f("ix_canonical_validator_identities_chain_id"),
        "canonical_validator_identities",
        ["chain_id"],
        unique=False,
    )
    op.create_table(
        "chain_provider_mappings",
        sa.Column("mapping_id", sa.UUID(), nullable=False, comment="Unique mapping identifier"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("provider_id", sa.UUID(), nullable=False, comment="Reference to provider"),
        sa.Column(
            "provider_role",
            sa.String(length=20),
            nullable=False,
            comment="Data type this provider supplies",
        ),
        sa.Column(
            "priority",
            sa.Integer(),
            nullable=False,
            comment="Source priority (1 = highest) for fallback",
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False, comment="Whether mapping is active"),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint(
            "provider_role IN ('FEES', 'MEV', 'REWARDS', 'META', 'RPC')",
            name="ck_chain_provider_mappings_role",
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["provider_id"], ["providers.provider_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("mapping_id"),
        sa.UniqueConstraint(
            "chain_id", "provider_role", "priority", name="uq_chain_provider_role_priority"
        ),
    )
    op.create_index(
        "idx_chain_provider_chain", "chain_provider_mappings", ["chain_id"], unique=False
    )
    op.create_index(
        "idx_chain_provider_provider", "chain_provider_mappings", ["provider_id"], unique=False
    )
    op.create_index(
        op.f("ix_chain_provider_mappings_chain_id"),
        "chain_provider_mappings",
        ["chain_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_chain_provider_mappings_provider_id"),
        "chain_provider_mappings",
        ["provider_id"],
        unique=False,
    )
    op.create_table(
        "agreement_versions",
        sa.Column("version_id", sa.UUID(), nullable=False, comment="Unique version identifier"),
        sa.Column(
            "agreement_id", sa.UUID(), nullable=False, comment="Reference to parent agreement"
        ),
        sa.Column(
            "version_number", sa.Integer(), nullable=False, comment="Sequential version number"
        ),
        sa.Column(
            "effective_from",
            sa.TIMESTAMP(timezone=True),
            nullable=False,
            comment="Version start date",
        ),
        sa.Column(
            "effective_until",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            comment="Version end date (nullable)",
        ),
        sa.Column(
            "terms_snapshot",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="Full agreement terms at this version",
        ),
        sa.Column("created_by", sa.UUID(), nullable=True, comment="User who created this version"),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.ForeignKeyConstraint(["agreement_id"], ["agreements.agreement_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("version_id"),
        sa.UniqueConstraint(
            "agreement_id", "version_number", name="uq_agreement_versions_agreement_version"
        ),
    )
    op.create_index(
        "idx_agreement_versions_agreement", "agreement_versions", ["agreement_id"], unique=False
    )
    op.create_index(
        "idx_agreement_versions_effective",
        "agreement_versions",
        ["effective_from", "effective_until"],
        unique=False,
    )
    op.create_table(
        "ingestion_runs",
        sa.Column("run_id", sa.UUID(), nullable=False, comment="Unique run identifier"),
        sa.Column(
            "chain_id",
            sa.String(length=50),
            nullable=False,
            comment="Reference to chain being ingested",
        ),
        sa.Column("period_id", sa.UUID(), nullable=True, comment="Reference to canonical period"),
        sa.Column(
            "started_at",
            sa.TIMESTAMP(timezone=True),
            server_default="NOW()",
            nullable=False,
            comment="Timestamp when ingestion started",
        ),
        sa.Column(
            "completed_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            comment="Timestamp when ingestion completed",
        ),
        sa.Column("status", sa.String(length=20), nullable=False, comment="Current job status"),
        sa.Column("error_message", sa.Text(), nullable=True, comment="Error details if job failed"),
        sa.Column(
            "records_fetched",
            sa.Integer(),
            nullable=False,
            comment="Total records fetched from providers",
        ),
        sa.Column(
            "records_staged",
            sa.Integer(),
            nullable=False,
            comment="Records successfully written to staging",
        ),
        sa.Column(
            "job_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Job configuration, provider versions, etc.",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint(
            "records_fetched >= 0", name="ck_ingestion_runs_records_fetched_positive"
        ),
        sa.CheckConstraint("records_staged >= 0", name="ck_ingestion_runs_records_staged_positive"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["period_id"], ["canonical_periods.period_id"], ondelete="SET NULL"
        ),
        sa.PrimaryKeyConstraint("run_id"),
    )
    op.create_index("idx_ingestion_runs_chain", "ingestion_runs", ["chain_id"], unique=False)
    op.create_index("idx_ingestion_runs_period", "ingestion_runs", ["period_id"], unique=False)
    op.create_index("idx_ingestion_runs_started", "ingestion_runs", ["started_at"], unique=False)
    op.create_index("idx_ingestion_runs_status", "ingestion_runs", ["status"], unique=False)
    op.create_table(
        "partner_commission_statements",
        sa.Column("statement_id", sa.UUID(), nullable=False, comment="Unique statement identifier"),
        sa.Column("partner_id", sa.UUID(), nullable=False, comment="Reference to partner"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Reference to canonical period"),
        sa.Column(
            "total_commission_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Sum of all commission lines",
        ),
        sa.Column(
            "line_count",
            sa.Integer(),
            nullable=False,
            comment="Number of commission lines included",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "DRAFT", "PENDING_APPROVAL", "APPROVED", "RELEASED", "PAID", name="statementstatus"
            ),
            nullable=False,
            comment="Statement lifecycle status",
        ),
        sa.Column("approved_by", sa.UUID(), nullable=True, comment="User who approved statement"),
        sa.Column(
            "approved_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            comment="When statement was approved",
        ),
        sa.Column("released_by", sa.UUID(), nullable=True, comment="User who released statement"),
        sa.Column(
            "released_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            comment="When statement was released",
        ),
        sa.Column(
            "paid_at",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            comment="When payment was completed",
        ),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Additional statement information",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint("line_count >= 0", name="ck_statements_line_count_positive"),
        sa.CheckConstraint("total_commission_native >= 0", name="ck_statements_total_positive"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["partner_id"], ["partners.partner_id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["period_id"], ["canonical_periods.period_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("statement_id"),
        sa.UniqueConstraint(
            "partner_id", "chain_id", "period_id", name="uq_statements_partner_chain_period"
        ),
    )
    op.create_index(
        "idx_statements_chain_period",
        "partner_commission_statements",
        ["chain_id", "period_id"],
        unique=False,
    )
    op.create_index(
        "idx_statements_partner", "partner_commission_statements", ["partner_id"], unique=False
    )
    op.create_index(
        "idx_statements_status", "partner_commission_statements", ["status"], unique=False
    )
    op.create_table(
        "validator_pnl",
        sa.Column("pnl_id", sa.UUID(), nullable=False, comment="Unique P&L record identifier"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Reference to canonical period"),
        sa.Column(
            "validator_key", sa.String(length=100), nullable=False, comment="Validator identifier"
        ),
        sa.Column(
            "exec_fees_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Execution fees in native units",
        ),
        sa.Column(
            "mev_tips_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="MEV tips in native units",
        ),
        sa.Column(
            "vote_rewards_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Vote/block rewards in native units",
        ),
        sa.Column(
            "commission_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Commission from delegators in native units",
        ),
        sa.Column(
            "total_revenue_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Sum of all revenue components",
        ),
        sa.Column(
            "computed_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when P&L was computed",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint("commission_native >= 0", name="ck_validator_pnl_commission_positive"),
        sa.CheckConstraint("exec_fees_native >= 0", name="ck_validator_pnl_exec_fees_positive"),
        sa.CheckConstraint("mev_tips_native >= 0", name="ck_validator_pnl_mev_tips_positive"),
        sa.CheckConstraint(
            "total_revenue_native >= 0", name="ck_validator_pnl_total_revenue_positive"
        ),
        sa.CheckConstraint(
            "vote_rewards_native >= 0", name="ck_validator_pnl_vote_rewards_positive"
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["period_id"], ["canonical_periods.period_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("pnl_id"),
        sa.UniqueConstraint(
            "chain_id", "period_id", "validator_key", name="uq_validator_pnl_chain_period_validator"
        ),
    )
    op.create_index(
        "idx_validator_pnl_chain_period", "validator_pnl", ["chain_id", "period_id"], unique=False
    )
    op.create_index("idx_validator_pnl_computed", "validator_pnl", ["computed_at"], unique=False)
    op.create_index("idx_validator_pnl_validator", "validator_pnl", ["validator_key"], unique=False)
    op.create_table(
        "agreement_rules",
        sa.Column("rule_id", sa.UUID(), nullable=False, comment="Unique rule identifier"),
        sa.Column(
            "agreement_id", sa.UUID(), nullable=False, comment="Reference to parent agreement"
        ),
        sa.Column(
            "version_number",
            sa.Integer(),
            nullable=False,
            comment="Agreement version this rule belongs to",
        ),
        sa.Column(
            "rule_order",
            sa.Integer(),
            nullable=False,
            comment="Execution order for multi-rule agreements",
        ),
        sa.Column(
            "chain_id",
            sa.String(length=50),
            nullable=True,
            comment="Optional chain filter (nullable)",
        ),
        sa.Column(
            "validator_key",
            sa.String(length=100),
            nullable=True,
            comment="Optional validator filter (nullable)",
        ),
        sa.Column(
            "revenue_component",
            sa.Enum("EXEC_FEES", "MEV_TIPS", "VOTE_REWARDS", "COMMISSION", name="revenuecomponent"),
            nullable=False,
            comment="Which P&L component this rule applies to",
        ),
        sa.Column(
            "attribution_method",
            sa.Enum("CLIENT_REVENUE", "STAKE_WEIGHT", "FIXED_SHARE", name="attributionmethod"),
            nullable=False,
            comment="How to calculate commission",
        ),
        sa.Column(
            "commission_rate_bps",
            sa.Integer(),
            nullable=False,
            comment="Commission percentage (basis points)",
        ),
        sa.Column(
            "floor_amount_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=True,
            comment="Min commission per period (nullable)",
        ),
        sa.Column(
            "cap_amount_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=True,
            comment="Max commission per period (nullable)",
        ),
        sa.Column(
            "tier_config",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Optional tier escalations (JSONB)",
        ),
        sa.Column("is_active", sa.Boolean(), nullable=False, comment="Soft-delete flag"),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint(
            "cap_amount_native IS NULL OR cap_amount_native >= 0",
            name="ck_agreement_rules_cap_positive",
        ),
        sa.CheckConstraint(
            "commission_rate_bps >= 0 AND commission_rate_bps <= 10000",
            name="ck_agreement_rules_commission_rate_valid",
        ),
        sa.CheckConstraint(
            "floor_amount_native IS NULL OR floor_amount_native >= 0",
            name="ck_agreement_rules_floor_positive",
        ),
        sa.ForeignKeyConstraint(
            ["agreement_id", "version_number"],
            ["agreement_versions.agreement_id", "agreement_versions.version_number"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["agreement_id"], ["agreements.agreement_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("rule_id"),
    )
    op.create_index("idx_agreement_rules_active", "agreement_rules", ["is_active"], unique=False)
    op.create_index(
        "idx_agreement_rules_agreement", "agreement_rules", ["agreement_id"], unique=False
    )
    op.create_index("idx_agreement_rules_chain", "agreement_rules", ["chain_id"], unique=False)
    op.create_index(
        "idx_agreement_rules_validator", "agreement_rules", ["validator_key"], unique=False
    )
    op.create_table(
        "staging_payloads",
        sa.Column("payload_id", sa.UUID(), nullable=False, comment="Unique payload identifier"),
        sa.Column("run_id", sa.UUID(), nullable=False, comment="Reference to ingestion run"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Reference to canonical period"),
        sa.Column(
            "validator_key", sa.String(length=100), nullable=False, comment="Validator identifier"
        ),
        sa.Column("provider_id", sa.UUID(), nullable=False, comment="Reference to data provider"),
        sa.Column(
            "data_type", sa.String(length=20), nullable=False, comment="Type of data being staged"
        ),
        sa.Column(
            "fetch_timestamp",
            sa.TIMESTAMP(timezone=True),
            server_default="NOW()",
            nullable=False,
            comment="When data was fetched from provider",
        ),
        sa.Column(
            "response_hash",
            sa.String(length=64),
            nullable=False,
            comment="SHA-256 hash of raw_payload for verification",
        ),
        sa.Column(
            "raw_payload",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="Unmodified JSON response from provider",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["period_id"], ["canonical_periods.period_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["provider_id"], ["providers.provider_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["run_id"], ["ingestion_runs.run_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("payload_id"),
    )
    op.create_index(
        "idx_staging_payloads_chain_period",
        "staging_payloads",
        ["chain_id", "period_id"],
        unique=False,
    )
    op.create_index(
        "idx_staging_payloads_data_type", "staging_payloads", ["data_type"], unique=False
    )
    op.create_index(
        "idx_staging_payloads_provider", "staging_payloads", ["provider_id"], unique=False
    )
    op.create_index(
        "idx_staging_payloads_raw_payload",
        "staging_payloads",
        ["raw_payload"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index("idx_staging_payloads_run", "staging_payloads", ["run_id"], unique=False)
    op.create_index(
        "idx_staging_payloads_validator", "staging_payloads", ["validator_key"], unique=False
    )
    op.create_table(
        "canonical_stake_rewards",
        sa.Column(
            "reward_id", sa.UUID(), nullable=False, comment="Unique reward record identifier"
        ),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Reference to canonical period"),
        sa.Column(
            "validator_key", sa.String(length=100), nullable=False, comment="Validator identifier"
        ),
        sa.Column(
            "staker_address",
            sa.String(length=100),
            nullable=True,
            comment="Specific staker address (null if aggregated)",
        ),
        sa.Column(
            "rewards_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Staker rewards before commission in native units",
        ),
        sa.Column(
            "commission_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Commission earned by validator in native units",
        ),
        sa.Column(
            "source_provider_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to data provider for traceability",
        ),
        sa.Column(
            "source_payload_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to staging payload for traceability",
        ),
        sa.Column(
            "normalized_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when data was normalized",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint(
            "commission_native >= 0", name="ck_canonical_rewards_commission_positive"
        ),
        sa.CheckConstraint("rewards_native >= 0", name="ck_canonical_rewards_rewards_positive"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["period_id"], ["canonical_periods.period_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["source_payload_id"], ["staging_payloads.payload_id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["source_provider_id"], ["providers.provider_id"], ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("reward_id"),
    )
    op.create_index(
        "idx_canonical_rewards_chain_period_validator",
        "canonical_stake_rewards",
        ["chain_id", "period_id", "validator_key"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_rewards_source_payload",
        "canonical_stake_rewards",
        ["source_payload_id"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_rewards_source_provider",
        "canonical_stake_rewards",
        ["source_provider_id"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_rewards_staker", "canonical_stake_rewards", ["staker_address"], unique=False
    )
    op.create_table(
        "canonical_validator_fees",
        sa.Column("fee_id", sa.UUID(), nullable=False, comment="Unique fee record identifier"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Reference to canonical period"),
        sa.Column(
            "validator_key", sa.String(length=100), nullable=False, comment="Validator identifier"
        ),
        sa.Column(
            "total_fees_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Total fees in native units (lamports, wei)",
        ),
        sa.Column(
            "fee_count",
            sa.Integer(),
            nullable=False,
            comment="Number of fee-paying transactions/blocks",
        ),
        sa.Column(
            "source_provider_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to data provider for traceability",
        ),
        sa.Column(
            "source_payload_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to staging payload for traceability",
        ),
        sa.Column(
            "normalized_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when data was normalized",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint("fee_count >= 0", name="ck_canonical_fees_count_positive"),
        sa.CheckConstraint("total_fees_native >= 0", name="ck_canonical_fees_total_positive"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["period_id"], ["canonical_periods.period_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["source_payload_id"], ["staging_payloads.payload_id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["source_provider_id"], ["providers.provider_id"], ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("fee_id"),
        sa.UniqueConstraint(
            "chain_id",
            "period_id",
            "validator_key",
            name="uq_canonical_fees_chain_period_validator",
        ),
    )
    op.create_index(
        "idx_canonical_fees_chain_period_validator",
        "canonical_validator_fees",
        ["chain_id", "period_id", "validator_key"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_fees_source_payload",
        "canonical_validator_fees",
        ["source_payload_id"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_fees_source_provider",
        "canonical_validator_fees",
        ["source_provider_id"],
        unique=False,
    )
    op.create_table(
        "canonical_validator_meta",
        sa.Column(
            "meta_id", sa.UUID(), nullable=False, comment="Unique metadata record identifier"
        ),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Reference to canonical period"),
        sa.Column(
            "validator_key", sa.String(length=100), nullable=False, comment="Validator identifier"
        ),
        sa.Column(
            "commission_rate_bps",
            sa.Integer(),
            nullable=False,
            comment="Validator commission rate in basis points (5% = 500)",
        ),
        sa.Column(
            "is_mev_enabled",
            sa.Boolean(),
            nullable=False,
            comment="Whether validator runs MEV client (Jito for Solana)",
        ),
        sa.Column(
            "total_stake_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Total stake amount in native units",
        ),
        sa.Column(
            "active_stake_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=True,
            comment="Active stake amount in native units",
        ),
        sa.Column("delegator_count", sa.Integer(), nullable=True, comment="Number of delegators"),
        sa.Column(
            "uptime_percentage",
            sa.NUMERIC(precision=5, scale=2),
            nullable=True,
            comment="Validator uptime percentage (0.00-100.00)",
        ),
        sa.Column(
            "source_provider_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to data provider for traceability",
        ),
        sa.Column(
            "source_payload_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to staging payload for traceability",
        ),
        sa.Column(
            "normalized_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when data was normalized",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint(
            "active_stake_native IS NULL OR active_stake_native >= 0",
            name="ck_canonical_meta_active_stake_positive",
        ),
        sa.CheckConstraint(
            "commission_rate_bps >= 0 AND commission_rate_bps <= 10000",
            name="ck_canonical_meta_commission_rate_valid",
        ),
        sa.CheckConstraint(
            "delegator_count IS NULL OR delegator_count >= 0",
            name="ck_canonical_meta_delegator_count_positive",
        ),
        sa.CheckConstraint(
            "total_stake_native >= 0", name="ck_canonical_meta_total_stake_positive"
        ),
        sa.CheckConstraint(
            "uptime_percentage IS NULL OR (uptime_percentage >= 0 AND uptime_percentage <= 100)",
            name="ck_canonical_meta_uptime_valid",
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["period_id"], ["canonical_periods.period_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["source_payload_id"], ["staging_payloads.payload_id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["source_provider_id"], ["providers.provider_id"], ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("meta_id"),
        sa.UniqueConstraint(
            "chain_id",
            "period_id",
            "validator_key",
            name="uq_canonical_meta_chain_period_validator",
        ),
    )
    op.create_index(
        "idx_canonical_meta_chain_period_validator",
        "canonical_validator_meta",
        ["chain_id", "period_id", "validator_key"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_meta_mev_enabled",
        "canonical_validator_meta",
        ["is_mev_enabled"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_meta_source_payload",
        "canonical_validator_meta",
        ["source_payload_id"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_meta_source_provider",
        "canonical_validator_meta",
        ["source_provider_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_canonical_validator_meta_is_mev_enabled"),
        "canonical_validator_meta",
        ["is_mev_enabled"],
        unique=False,
    )
    op.create_table(
        "canonical_validator_mev",
        sa.Column("mev_id", sa.UUID(), nullable=False, comment="Unique MEV record identifier"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Reference to canonical period"),
        sa.Column(
            "validator_key", sa.String(length=100), nullable=False, comment="Validator identifier"
        ),
        sa.Column(
            "total_mev_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Total MEV tips in native units (lamports, wei)",
        ),
        sa.Column(
            "tip_count", sa.Integer(), nullable=False, comment="Number of MEV tip distributions"
        ),
        sa.Column(
            "source_provider_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to data provider for traceability",
        ),
        sa.Column(
            "source_payload_id",
            sa.UUID(),
            nullable=False,
            comment="Reference to staging payload for traceability",
        ),
        sa.Column(
            "normalized_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when data was normalized",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint("tip_count >= 0", name="ck_canonical_mev_count_positive"),
        sa.CheckConstraint("total_mev_native >= 0", name="ck_canonical_mev_total_positive"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["period_id"], ["canonical_periods.period_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["source_payload_id"], ["staging_payloads.payload_id"], ondelete="RESTRICT"
        ),
        sa.ForeignKeyConstraint(
            ["source_provider_id"], ["providers.provider_id"], ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("mev_id"),
        sa.UniqueConstraint(
            "chain_id", "period_id", "validator_key", name="uq_canonical_mev_chain_period_validator"
        ),
    )
    op.create_index(
        "idx_canonical_mev_chain_period_validator",
        "canonical_validator_mev",
        ["chain_id", "period_id", "validator_key"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_mev_source_payload",
        "canonical_validator_mev",
        ["source_payload_id"],
        unique=False,
    )
    op.create_index(
        "idx_canonical_mev_source_provider",
        "canonical_validator_mev",
        ["source_provider_id"],
        unique=False,
    )
    op.create_table(
        "partner_commission_lines",
        sa.Column("line_id", sa.UUID(), nullable=False, comment="Unique line identifier"),
        sa.Column("agreement_id", sa.UUID(), nullable=False, comment="Reference to agreement"),
        sa.Column(
            "agreement_version", sa.Integer(), nullable=False, comment="Agreement version number"
        ),
        sa.Column("rule_id", sa.UUID(), nullable=False, comment="Reference to commission rule"),
        sa.Column("partner_id", sa.UUID(), nullable=False, comment="Reference to partner"),
        sa.Column("chain_id", sa.String(length=50), nullable=False, comment="Reference to chain"),
        sa.Column("period_id", sa.UUID(), nullable=False, comment="Reference to canonical period"),
        sa.Column(
            "validator_key",
            sa.String(length=100),
            nullable=True,
            comment="Validator identifier (nullable for aggregated)",
        ),
        sa.Column(
            "revenue_component",
            sa.Enum("EXEC_FEES", "MEV_TIPS", "VOTE_REWARDS", "COMMISSION", name="revenuecomponent"),
            nullable=False,
            comment="Revenue component this commission is based on",
        ),
        sa.Column(
            "attribution_method",
            sa.Enum("CLIENT_REVENUE", "STAKE_WEIGHT", "FIXED_SHARE", name="attributionmethod"),
            nullable=False,
            comment="Attribution method used",
        ),
        sa.Column(
            "base_amount_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Revenue amount commission is based on",
        ),
        sa.Column(
            "commission_rate_bps",
            sa.Integer(),
            nullable=False,
            comment="Commission rate applied (basis points)",
        ),
        sa.Column(
            "pre_override_amount_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Calculated commission before override",
        ),
        sa.Column(
            "override_amount_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=True,
            comment="Manual adjustment amount (nullable)",
        ),
        sa.Column(
            "override_reason", sa.Text(), nullable=True, comment="Justification for override"
        ),
        sa.Column("override_user_id", sa.UUID(), nullable=True, comment="User who made override"),
        sa.Column(
            "override_timestamp",
            sa.TIMESTAMP(timezone=True),
            nullable=True,
            comment="When override was made",
        ),
        sa.Column(
            "final_amount_native",
            sa.NUMERIC(precision=38, scale=18),
            nullable=False,
            comment="Final commission amount",
        ),
        sa.Column(
            "computed_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when commission was computed",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was created",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when record was last updated",
        ),
        sa.CheckConstraint("base_amount_native >= 0", name="ck_commission_lines_base_positive"),
        sa.CheckConstraint(
            "commission_rate_bps >= 0 AND commission_rate_bps <= 10000",
            name="ck_commission_lines_rate_valid",
        ),
        sa.CheckConstraint("final_amount_native >= 0", name="ck_commission_lines_final_positive"),
        sa.CheckConstraint(
            "pre_override_amount_native >= 0", name="ck_commission_lines_pre_override_positive"
        ),
        sa.ForeignKeyConstraint(["agreement_id"], ["agreements.agreement_id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.chain_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["partner_id"], ["partners.partner_id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["period_id"], ["canonical_periods.period_id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["rule_id"], ["agreement_rules.rule_id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("line_id"),
    )
    op.create_index(
        "idx_commission_lines_agreement", "partner_commission_lines", ["agreement_id"], unique=False
    )
    op.create_index(
        "idx_commission_lines_chain_period",
        "partner_commission_lines",
        ["chain_id", "period_id"],
        unique=False,
    )
    op.create_index(
        "idx_commission_lines_computed", "partner_commission_lines", ["computed_at"], unique=False
    )
    op.create_index(
        "idx_commission_lines_partner", "partner_commission_lines", ["partner_id"], unique=False
    )
    op.create_index(
        "idx_commission_lines_validator",
        "partner_commission_lines",
        ["validator_key"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_commission_lines_validator", table_name="partner_commission_lines")
    op.drop_index("idx_commission_lines_partner", table_name="partner_commission_lines")
    op.drop_index("idx_commission_lines_computed", table_name="partner_commission_lines")
    op.drop_index("idx_commission_lines_chain_period", table_name="partner_commission_lines")
    op.drop_index("idx_commission_lines_agreement", table_name="partner_commission_lines")
    op.drop_table("partner_commission_lines")
    op.drop_index("idx_canonical_mev_source_provider", table_name="canonical_validator_mev")
    op.drop_index("idx_canonical_mev_source_payload", table_name="canonical_validator_mev")
    op.drop_index("idx_canonical_mev_chain_period_validator", table_name="canonical_validator_mev")
    op.drop_table("canonical_validator_mev")
    op.drop_index(
        op.f("ix_canonical_validator_meta_is_mev_enabled"), table_name="canonical_validator_meta"
    )
    op.drop_index("idx_canonical_meta_source_provider", table_name="canonical_validator_meta")
    op.drop_index("idx_canonical_meta_source_payload", table_name="canonical_validator_meta")
    op.drop_index("idx_canonical_meta_mev_enabled", table_name="canonical_validator_meta")
    op.drop_index(
        "idx_canonical_meta_chain_period_validator", table_name="canonical_validator_meta"
    )
    op.drop_table("canonical_validator_meta")
    op.drop_index("idx_canonical_fees_source_provider", table_name="canonical_validator_fees")
    op.drop_index("idx_canonical_fees_source_payload", table_name="canonical_validator_fees")
    op.drop_index(
        "idx_canonical_fees_chain_period_validator", table_name="canonical_validator_fees"
    )
    op.drop_table("canonical_validator_fees")
    op.drop_index("idx_canonical_rewards_staker", table_name="canonical_stake_rewards")
    op.drop_index("idx_canonical_rewards_source_provider", table_name="canonical_stake_rewards")
    op.drop_index("idx_canonical_rewards_source_payload", table_name="canonical_stake_rewards")
    op.drop_index(
        "idx_canonical_rewards_chain_period_validator", table_name="canonical_stake_rewards"
    )
    op.drop_table("canonical_stake_rewards")
    op.drop_index("idx_staging_payloads_validator", table_name="staging_payloads")
    op.drop_index("idx_staging_payloads_run", table_name="staging_payloads")
    op.drop_index(
        "idx_staging_payloads_raw_payload", table_name="staging_payloads", postgresql_using="gin"
    )
    op.drop_index("idx_staging_payloads_provider", table_name="staging_payloads")
    op.drop_index("idx_staging_payloads_data_type", table_name="staging_payloads")
    op.drop_index("idx_staging_payloads_chain_period", table_name="staging_payloads")
    op.drop_table("staging_payloads")
    op.drop_index("idx_agreement_rules_validator", table_name="agreement_rules")
    op.drop_index("idx_agreement_rules_chain", table_name="agreement_rules")
    op.drop_index("idx_agreement_rules_agreement", table_name="agreement_rules")
    op.drop_index("idx_agreement_rules_active", table_name="agreement_rules")
    op.drop_table("agreement_rules")
    op.drop_index("idx_validator_pnl_validator", table_name="validator_pnl")
    op.drop_index("idx_validator_pnl_computed", table_name="validator_pnl")
    op.drop_index("idx_validator_pnl_chain_period", table_name="validator_pnl")
    op.drop_table("validator_pnl")
    op.drop_index("idx_statements_status", table_name="partner_commission_statements")
    op.drop_index("idx_statements_partner", table_name="partner_commission_statements")
    op.drop_index("idx_statements_chain_period", table_name="partner_commission_statements")
    op.drop_table("partner_commission_statements")
    op.drop_index("idx_ingestion_runs_status", table_name="ingestion_runs")
    op.drop_index("idx_ingestion_runs_started", table_name="ingestion_runs")
    op.drop_index("idx_ingestion_runs_period", table_name="ingestion_runs")
    op.drop_index("idx_ingestion_runs_chain", table_name="ingestion_runs")
    op.drop_table("ingestion_runs")
    op.drop_index("idx_agreement_versions_effective", table_name="agreement_versions")
    op.drop_index("idx_agreement_versions_agreement", table_name="agreement_versions")
    op.drop_table("agreement_versions")
    op.drop_index(
        op.f("ix_chain_provider_mappings_provider_id"), table_name="chain_provider_mappings"
    )
    op.drop_index(op.f("ix_chain_provider_mappings_chain_id"), table_name="chain_provider_mappings")
    op.drop_index("idx_chain_provider_provider", table_name="chain_provider_mappings")
    op.drop_index("idx_chain_provider_chain", table_name="chain_provider_mappings")
    op.drop_table("chain_provider_mappings")
    op.drop_index(
        op.f("ix_canonical_validator_identities_chain_id"),
        table_name="canonical_validator_identities",
    )
    op.drop_index("idx_validator_identities_key", table_name="canonical_validator_identities")
    op.drop_index("idx_validator_identities_chain", table_name="canonical_validator_identities")
    op.drop_table("canonical_validator_identities")
    op.drop_index(op.f("ix_canonical_periods_chain_id"), table_name="canonical_periods")
    op.drop_index("idx_canonical_periods_range", table_name="canonical_periods")
    op.drop_index("idx_canonical_periods_finalized", table_name="canonical_periods")
    op.drop_index("idx_canonical_periods_chain", table_name="canonical_periods")
    op.drop_table("canonical_periods")
    op.drop_index("idx_agreements_status", table_name="agreements")
    op.drop_index("idx_agreements_partner", table_name="agreements")
    op.drop_index("idx_agreements_effective", table_name="agreements")
    op.drop_table("agreements")
    op.drop_index(op.f("ix_providers_provider_type"), table_name="providers")
    op.drop_index(op.f("ix_providers_provider_name"), table_name="providers")
    op.drop_index(op.f("ix_providers_is_enabled"), table_name="providers")
    op.drop_index("idx_providers_type", table_name="providers")
    op.drop_index("idx_providers_name", table_name="providers")
    op.drop_index("idx_providers_enabled", table_name="providers")
    op.drop_table("providers")
    op.drop_index("idx_partners_email", table_name="partners")
    op.drop_index("idx_partners_active", table_name="partners")
    op.drop_table("partners")
    op.drop_index(op.f("ix_chains_is_active"), table_name="chains")
    op.drop_index("idx_chains_active", table_name="chains")
    op.drop_table("chains")
    # ### end Alembic commands ###

    # Drop custom ENUM types (SQLAlchemy doesn't auto-drop these in PostgreSQL)
    op.execute("DROP TYPE IF EXISTS ingestionstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS datatype CASCADE")
    op.execute("DROP TYPE IF EXISTS agreementstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS revenuecomponent CASCADE")
    op.execute("DROP TYPE IF EXISTS attributionmethod CASCADE")
    op.execute("DROP TYPE IF EXISTS statementstatus CASCADE")
